;;return that largest nested string of stacked boxes.

; Sample Input 
; 5  2
; 3  7
; 8  10
; 5  2
; 9  11
; 21  18
;  
; Sample Output
; 5
; 3  1  2  4  5
; 4
; 7  2  5  6

;;Consider using a map to keep track of the location of the boxes
(def smallmap '{:0[5 2]:1[3 7]:2[8 10]:3[5 2]:4[9 11]:5[21 18]})


(def list1 '(5 2 20 1 30 10))
(def list2 '(23 15 7 9 11 3))

(def smalllist '[[8 6] [3 7] [8 10] [5 2] [9 11] [21 18]])
(def largelist '[[5 2 20 1 30 10][23 15 7 9 11 3][40 50 34 24 14 4]
                 [9 10 11 12 13 14][31 4 18 8 27 17][44 32 13 19 41 19]
                 [1 2 3 4 5 6][80 37 47 18 21 9]])
               
(sort '(5 2 20 1 30 10))

;;sorts lists by their first element - Will need to change to account
;;for second elements in each list.
(defn sort-first [lis]
  (sort-by first (map sort-lis lis))
)

(defn sort-lis [lis]
  (sort lis))

(defn comp-lists [lis1 lis2]
  (if (pos? (compare lis1 lis2))
      (lis1)
      (lis2)
  ))
